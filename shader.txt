Module {
    types: {
        [1]: Type {
            name: None,
            inner: Vector {
                size: Tri,
                kind: Float,
                width: 4,
            },
        },
        [2]: Type {
            name: None,
            inner: Vector {
                size: Bi,
                kind: Float,
                width: 4,
            },
        },
        [3]: Type {
            name: Some(
                "VertexInput",
            ),
            inner: Struct {
                members: [
                    StructMember {
                        name: Some(
                            "position",
                        ),
                        ty: [1],
                        binding: Some(
                            Location {
                                location: 0,
                                interpolation: Some(
                                    Perspective,
                                ),
                                sampling: Some(
                                    Center,
                                ),
                            },
                        ),
                        offset: 0,
                    },
                    StructMember {
                        name: Some(
                            "tex_coords",
                        ),
                        ty: [2],
                        binding: Some(
                            Location {
                                location: 1,
                                interpolation: Some(
                                    Perspective,
                                ),
                                sampling: Some(
                                    Center,
                                ),
                            },
                        ),
                        offset: 16,
                    },
                ],
                span: 32,
            },
        },
        [4]: Type {
            name: None,
            inner: Vector {
                size: Quad,
                kind: Float,
                width: 4,
            },
        },
        [5]: Type {
            name: Some(
                "VertexOutput",
            ),
            inner: Struct {
                members: [
                    StructMember {
                        name: Some(
                            "clip_position",
                        ),
                        ty: [4],
                        binding: Some(
                            BuiltIn(
                                Position {
                                    invariant: false,
                                },
                            ),
                        ),
                        offset: 0,
                    },
                    StructMember {
                        name: Some(
                            "tex_coords",
                        ),
                        ty: [2],
                        binding: Some(
                            Location {
                                location: 0,
                                interpolation: Some(
                                    Perspective,
                                ),
                                sampling: Some(
                                    Center,
                                ),
                            },
                        ),
                        offset: 16,
                    },
                ],
                span: 32,
            },
        },
        [6]: Type {
            name: None,
            inner: Image {
                dim: D2,
                arrayed: false,
                class: Sampled {
                    kind: Float,
                    multi: false,
                },
            },
        },
        [7]: Type {
            name: None,
            inner: Sampler {
                comparison: false,
            },
        },
    },
    constants: {
        [1]: Constant {
            name: None,
            specialization: None,
            inner: Scalar {
                width: 4,
                value: Float(
                    1.0,
                ),
            },
        },
    },
    global_variables: {
        [1]: GlobalVariable {
            name: Some(
                "t_diffuse",
            ),
            space: Handle,
            binding: Some(
                ResourceBinding {
                    group: 0,
                    binding: 0,
                },
            ),
            ty: [6],
            init: None,
        },
        [2]: GlobalVariable {
            name: Some(
                "s_diffuse",
            ),
            space: Handle,
            binding: Some(
                ResourceBinding {
                    group: 0,
                    binding: 1,
                },
            ),
            ty: [7],
            init: None,
        },
    },
    functions: {},
    entry_points: [
        EntryPoint {
            name: "vs_main",
            stage: Vertex,
            early_depth_test: None,
            workgroup_size: [
                0,
                0,
                0,
            ],
            function: Function {
                name: Some(
                    "vs_main",
                ),
                arguments: [
                    FunctionArgument {
                        name: Some(
                            "input",
                        ),
                        ty: [3],
                        binding: None,
                    },
                ],
                result: Some(
                    FunctionResult {
                        ty: [5],
                        binding: None,
                    },
                ),
                local_variables: {
                    [1]: LocalVariable {
                        name: Some(
                            "out",
                        ),
                        ty: [5],
                        init: None,
                    },
                },
                expressions: {
                    [1]: FunctionArgument(
                        0,
                    ),
                    [2]: LocalVariable(
                        [1],
                    ),
                    [3]: AccessIndex {
                        base: [2],
                        index: 1,
                    },
                    [4]: AccessIndex {
                        base: [1],
                        index: 1,
                    },
                    [5]: AccessIndex {
                        base: [2],
                        index: 0,
                    },
                    [6]: AccessIndex {
                        base: [1],
                        index: 0,
                    },
                    [7]: Constant(
                        [1],
                    ),
                    [8]: Compose {
                        ty: [4],
                        components: [
                            [6],
                            [7],
                        ],
                    },
                    [9]: Load {
                        pointer: [2],
                    },
                },
                named_expressions: {},
                body: Block {
                    body: [
                        Emit(
                            [3..4],
                        ),
                        Store {
                            pointer: [3],
                            value: [4],
                        },
                        Emit(
                            [5..6],
                        ),
                        Emit(
                            [8..8],
                        ),
                        Store {
                            pointer: [5],
                            value: [8],
                        },
                        Emit(
                            [9..9],
                        ),
                        Return {
                            value: Some(
                                [9],
                            ),
                        },
                    ],
                    span_info: [
                        Span {
                            start: 320,
                            end: 358,
                        },
                        Span {
                            start: 320,
                            end: 358,
                        },
                        Span {
                            start: 359,
                            end: 408,
                        },
                        Span {
                            start: 383,
                            end: 414,
                        },
                        Span {
                            start: 359,
                            end: 414,
                        },
                        Span {
                            start: 0,
                            end: 0,
                        },
                        Span {
                            start: 415,
                            end: 431,
                        },
                    ],
                },
            },
        },
        EntryPoint {
            name: "fs_main",
            stage: Fragment,
            early_depth_test: None,
            workgroup_size: [
                0,
                0,
                0,
            ],
            function: Function {
                name: Some(
                    "fs_main",
                ),
                arguments: [
                    FunctionArgument {
                        name: Some(
                            "in",
                        ),
                        ty: [5],
                        binding: None,
                    },
                ],
                result: Some(
                    FunctionResult {
                        ty: [4],
                        binding: Some(
                            Location {
                                location: 0,
                                interpolation: Some(
                                    Perspective,
                                ),
                                sampling: Some(
                                    Center,
                                ),
                            },
                        ),
                    },
                ),
                local_variables: {},
                expressions: {
                    [1]: GlobalVariable(
                        [2],
                    ),
                    [2]: GlobalVariable(
                        [1],
                    ),
                    [3]: FunctionArgument(
                        0,
                    ),
                    [4]: AccessIndex {
                        base: [3],
                        index: 1,
                    },
                    [5]: ImageSample {
                        image: [2],
                        sampler: [1],
                        gather: None,
                        coordinate: [4],
                        array_index: None,
                        offset: None,
                        level: Auto,
                        depth_ref: None,
                    },
                },
                named_expressions: {},
                body: Block {
                    body: [
                        Emit(
                            [4..5],
                        ),
                        Return {
                            value: Some(
                                [5],
                            ),
                        },
                    ],
                    span_info: [
                        Span {
                            start: 634,
                            end: 685,
                        },
                        Span {
                            start: 623,
                            end: 686,
                        },
                    ],
                },
            },
        },
    ],
}

ModuleInfo {
    functions: [],
    entry_points: [
        FunctionInfo {
            flags: EXPRESSIONS | BLOCKS | CONTROL_FLOW_UNIFORMITY | STRUCT_LAYOUTS | CONSTANTS,
            available_stages: VERTEX | FRAGMENT | COMPUTE,
            uniformity: Uniformity {
                non_uniform_result: Some(
                    [2],
                ),
                requirements: (empty),
            },
            may_kill: false,
            sampling_set: {},
            global_uses: [
                (empty),
                (empty),
            ],
            expressions: [
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: (empty),
                    },
                    ref_count: 2,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [2],
                        ),
                        requirements: (empty),
                    },
                    ref_count: 3,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [5],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [2],
                        ),
                        requirements: (empty),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [2],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: (empty),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [2],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [2],
                        ),
                        requirements: (empty),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [4],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: (empty),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [1],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: (empty),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar {
                            kind: Float,
                            width: 4,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: (empty),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [4],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [2],
                        ),
                        requirements: (empty),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [5],
                    ),
                },
            ],
            sampling: {},
        },
        FunctionInfo {
            flags: EXPRESSIONS | BLOCKS | CONTROL_FLOW_UNIFORMITY | STRUCT_LAYOUTS | CONSTANTS,
            available_stages: FRAGMENT,
            uniformity: Uniformity {
                non_uniform_result: Some(
                    [2],
                ),
                requirements: IMPLICIT_LEVEL,
            },
            may_kill: false,
            sampling_set: {
                SamplingKey {
                    image: [1],
                    sampler: [2],
                },
            },
            global_uses: [
                READ,
                READ,
            ],
            expressions: [
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: (empty),
                    },
                    ref_count: 1,
                    assignable_global: Some(
                        [2],
                    ),
                    ty: Handle(
                        [7],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [2],
                        ),
                        requirements: (empty),
                    },
                    ref_count: 1,
                    assignable_global: Some(
                        [1],
                    ),
                    ty: Handle(
                        [6],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [3],
                        ),
                        requirements: (empty),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [5],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [3],
                        ),
                        requirements: (empty),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [2],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [2],
                        ),
                        requirements: IMPLICIT_LEVEL,
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Vector {
                            size: Quad,
                            kind: Float,
                            width: 4,
                        },
                    ),
                },
            ],
            sampling: {},
        },
    ],
}
